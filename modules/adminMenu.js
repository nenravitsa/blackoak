const buttons = require('../buttons');

const initialize = (bot, chats, admins) => {
  const isLegit = (type, id) => {
    return type==='private'&&admins.includes(id)
  };

  const keyboard = {
    reply_markup: {
      resize_keyboard: true,
      keyboard: [chats.title]
    }
  };

  bot.onText(/\/start|‚¨ÖÔ∏è–ù–∞–∑–∞–¥/, (msg) => {
    if(isLegit(msg.chat.type, msg.from.id)){
      bot.sendMessage(msg.chat.id, '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ç—Ä—è–¥–∞–º', keyboard)
    }
  });
  let chat;
  bot.onText(/(.+)/, (msg, match) => {
      if(isLegit(msg.chat.type, msg.from.id)){
        const index = chats.title.indexOf(match[0]);
        if(index!==-1){
          chat = chats.title[index];
          if(match[0]===chat) bot.sendMessage(msg.chat.id, `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç—Ä—è–¥–µ ${chat}`, buttons.stat_keyboard)
        }
        if(match[0]==='üê∞ –ü–µ—Ç—ã') bot.sendMessage(msg.chat.id, `–ü–µ—Ç—ã –æ—Ç—Ä—è–¥–∞ ${chat}`, buttons.pets_keyboard);
        if(match[0]==='üòø –£ –∫–æ–≥–æ –Ω–µ—Ç') bot.sendMessage(msg.chat.id, `–ï—â–µ –Ω–µ –∑–∞–≤–µ–ª–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –æ—Ç—Ä—è–¥–µ ${chat}`);
      }
  });
};



module.exports = initialize;
