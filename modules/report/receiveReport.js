const getAch = require('../../helpers/getAchievement');
const parseMessage = require('./parseMessage');
const createUser = require('./createUser');
const updateUser = require('./updateUser');
const date = require('../../helpers/date');
const messages = require('../../messages');
const Warrior = require('../../models/warrior');

const receiveReport = (bot) => {
  bot.onText(/[üçÅüåπüçÜü¶áüê¢üñ§‚òòÔ∏è](.*?‚öî:)(.+)/, (msg) => {
    if(msg.forward_from&&msg.forward_from.id===265204902) {
      const chatId = msg.chat.id;
      if ((msg.date - msg.forward_date) > 600) {
        bot.sendMessage(chatId, '–ü—Ä–∏—à–ª–∏ –º–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–µ–∂–∏–π —Ä–µ–ø–æ—Ä—Ç.', {reply_to_message_id: msg.message_id});
        getAch(bot, userId, "‚åõ –°—Ç–∞—Ä–æ –∫–∞–∫ –º–∏—Ä")
      }
      if(chatId === -1001175776732) {
        getAch(bot, msg.from.id, "‚õî –ù–µ —Ç—É–¥–∞")
      }
      else {
        const userId = msg.from.id;
        const username = msg.from.username;
        const b_date = date.nearestBattleTime(new Date());
        const parse = parseMessage(msg.text);
        let message, ach;
        if(parse.exp === 0) {message = "–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –Ω–µ –ø—Ä–æ—Å–ø–∏!"; ach = "üí§ –í—Å–µ –ø—Ä–æ—Å–ø–∞–ª"}
        else if(parse.gold && parse.gold < 0){message = "–ù–µ –∑–∞–±—ã–≤–∞–π —Å–ª–∏–≤–∞—Ç—å –≥–æ–ª–¥—É, –ø–∏—Ä–æ–∂–æ—á–µ–∫!"; ach = 'üôä –†–∞—Å—Ç–æ—á–∏—Ç–µ–ª—å –±–æ–≥–∞—Ç—Å—Ç–≤'}
        else {message = messages[[Math.floor(Math.random() * messages.length)]]; ach=''}
        Warrior.findOne({t_id:userId}).then((res)=>{
          if(res){
            const isName = res.cw_name===parse.cw_name;
            const isOld = ~res.battles.findIndex(v=>v.date.getTime()===b_date.getTime());
            if(!isName) {
              bot.sendMessage(chatId, '–≠—Ç–æ –Ω–µ —Ç–≤–æ–π —Ä–µ–ø–æ—Ä—Ç. –ù–µ –æ–±–º–∞–Ω—ã–≤–∞–π.', {reply_to_message_id: msg.message_id});
              getAch(bot, msg.from.id, 'üêû –ù–µ—Ä–µ–∞–ª—å–Ω—ã–π –∂—É—á–∞—Ä–∞')
            }
            if (isOld){
              bot.sendMessage(chatId, '–†–µ–ø–æ—Ä—Ç —É–∂–µ –ø—Ä–∏–Ω—è—Ç!', {reply_to_message_id: msg.message_id});
              getAch(bot, msg.from.id, 'üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –º–∞—Ç—å —É—á–µ–Ω–∏—è')
            }
            else if(isName&&!isOld) {
              updateUser(res, parse, userId, username, msg.chat.title, bot);
              const battle = {
                date: b_date,
                exp: parse.exp,
                gold: parse.gold,
                stock: parse.stock
              };
              res.battles.push(battle);
              res.save().then(() => {
                bot.sendMessage(chatId, message, {reply_to_message_id: msg.message_id});
                if(ach.length>0) {
                  getAch(bot, msg.from.id, ach)
                }
              }).catch(err => console.error(err))
            }
          }
          else {
            createUser(parse, userId, username, msg.chat.title, b_date).then(()=>{
              const add = '\n\n –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: üëã –ü—Ä–∏–≤–µ—Ç, –Ω–æ–≤–∏—á–æ–∫! \n\n –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∞—á–∏–≤–∫–∞—Ö, –Ω–∞–∂–º–∏ \/start –≤ –ª–∏—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ —Å –±–æ—Ç–æ–º';
              bot.sendMessage(chatId, message+add, {reply_to_message_id: msg.message_id});
            }).catch(err=> console.log('text', msg.text, 'err: ', err));
          }
        })
      }
    }
  })
};

module.exports = receiveReport;
